generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  clerkId   String   @unique // Clerk's user ID
  email     String
  threads   Thread[]
  createdAt DateTime @default(now())

  // Payment related fields
  isSubscribed        Boolean   @default(false)
  subscriptionId      String?   @unique
  razorpayCustomerId  String?
  subscriptionEndDate DateTime?
  paymentHistory      Payment[]
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  razorpayOrderId   String        @unique
  razorpayPaymentId String?
  amount            Int // Amount in paise (smallest currency unit)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  planType          String // e.g., "monthly", "yearly"
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Thread {
  id             String          @id @default(cuid())
  title          String
  userId         String
  fileId         String
  publicId       String          @unique @default(cuid())
  isSharable     Boolean         @default(false)
  viewerCount    Int             @default(0)
  resumeText     String
  parsedSections Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  openaiThreadId String?
  versions       ResumeVersion[]
}

model ResumeVersion {
  id        String   @id @default(cuid())
  threadId  String
  diff      Json // store the diff from the previous version
  createdAt DateTime @default(now())
  title     String
  thread    Thread   @relation(fields: [threadId], references: [id])
}
